[{"content":" 鼠标拖动，滚轮放大缩小。\n 水平视图 \r径向图 ","description":"矿物分类树","id":0,"section":"posts","tags":["矿物分类","d3js"],"title":"矿物分类","uri":"https://mayan-lab.github.io/zh/posts/mineral-tree/"},{"content":" Matlab借助其强大的Gui控件可以很容易地开发可视化程序，让处理数据的过程更加交互化。对于解析Gui输入框中手动输入的表达式（比如：a + b / ln(c)，a，b可以代表运行时产生的变量的字符串名称，通过索引来映射：list = ['a','b']，data = [1 2])，程序需要实现堆栈类，通过根据优先级进行计算、出栈、入栈的操作。\n 解析表达式常用的算法有两种：   将表达式转换成后缀表达式，然后使用堆栈进行计算 直接进行堆栈，计算中间结果的同时考虑预算优先级   这里使用的是后缀表达式，这种方式较为优雅。首先，我们正常人类识别的计算公式为中缀表达式，例如：2+(-1+11)*ln(e^2)。中缀表达式中各个运算符的优先级只能人类识别，而后缀表达式运算优先级只有一个方向。2+(-1+11)*ln(e^2) 转换为后缀表达式为：'2 1 11 - e 2 ^ ln * + '，先来看后缀表达式如何计算：\n 定义两个堆栈：操作数堆栈、运算符堆栈。从左至右读取表达式，如果是操作数（数值），就入栈，如果是运算符，就根据不同运算符需要的操作数个数不同从操作数堆栈弹出，然后计算，将结果压入操作数堆栈，继续扫描表达式。\n   完整过程   读入数值 2 1 11入操作数栈，读到减号 -，减号需要两个操作数，从操作数栈弹出两个数值，依次是 11 1，计算 1-11，将结果 -10压入操作数栈。  继续扫描表达式，读到 e，压入自然底数的数值，在matlab中通过 exp(1) 实现。接着将 2入栈。读至 ^，弹出操作数栈两个操作数，做幂指数运算：e^2。将结果入栈。  以此类推。    转化为后缀表达式的过程: 核心是操作符的优先级。定义一个运算符堆栈，从左至右扫描表达式，如果是操作数，就输出（拼接字符串，或者通过堆栈来接收)，如果是运算符，记op：\n 若为 (:\n直接入栈 若为 ):\n则不断将运算符堆栈弹出，直至 ( 若为其他运算符：  若堆栈为空，则直接入栈，否则 若栈顶为(，则直接入栈 比较op和栈顶运算符的优先级，如果op运算级高（不包括等于），将op入栈 如果栈顶运算符优先级大于等于op，将栈顶运算符弹出，继续将op与此时栈顶运算符比较，直至堆栈为空，    对于2+(1-11)*ln(e^2)，具体过程如下：\n 第一个字符为2，输出2 读至+，此时栈为空，直接入栈 读至(，直接入栈 读至1，直接输出：2 1 读至-，此时栈顶运算符为(，直接入栈。 读至11，输出2 1 11 读至)，则不断弹出栈，直至(，输出：2 1 11 -，此时栈中有：+ 读至*，此时栈顶运算符为+，优先级：* \u0026gt; +，直接入栈 读至ln，此时栈顶运算符为*，优先级：ln \u0026gt; *，直接入栈 读至(，直接入栈，此时栈中有：+ * ln ( 读至e，直接输出：2 1 11 - e 读至^，此时栈顶运算符为(，直接入栈。此时栈中有：+ * ln ( ^ 读至2，直接输出：2 1 11 - e 2 读至)，则不断弹出栈，直至(，输出：2 1 11 - e 2 ^，此时栈中有：+ * ln 表达式扫描结束，将堆栈剩余运算符依次弹出，输出：2 1 11 - e 2 ^ ln * +  示例 字符串操作Tips：\n 字符串比较：strcmp(s1,s2); 字符串分割：strsplit(s,delemiter); 不可用==进行字符串比较，不可用split分割字符串 查询时候包含某个字符串：ismember(strGroup, oneStr)，将字符串数组作为第一参数，方便获得索引。  示例 Stack类 Gui示例clear\rexpression = \u0026#39;2+(1-11)*ln(e^2)\u0026#39;;\rpostfixExp = transformPostfixExpression(expression);\rresult = evalPostFixExpression(postfixExp);\rfunctionvalue =evalPostFixExpression(expression)resultStack = Stack;\rexpression = strsplit(expression);\rfor i=1:length(expression)\rswitch expression{i}\rcase {\u0026#39;--\u0026#39;}\r[resultStack,value] = resultStack.pop();\rvalue = - value;\rresultStack = resultStack.push(value);\rcase {\u0026#39;ln\u0026#39;}\r[resultStack,value] = resultStack.pop();\rvalue = log(value);\rresultStack = resultStack.push(value);\rcase {\u0026#39;lg\u0026#39;}\r[resultStack,value] = resultStack.pop();\rvalue = log10(value);\rresultStack = resultStack.push(value);\rcase {\u0026#39;^\u0026#39;}\r[resultStack,latter] = resultStack.pop();\r[resultStack,former] = resultStack.pop();\rvalue = former ^ latter;\rresultStack = resultStack.push(value);\rcase {\u0026#39;+\u0026#39;}\r[resultStack,latter] = resultStack.pop();\r[resultStack,former] = resultStack.pop();\rvalue = former + latter;\rresultStack = resultStack.push(value);\rcase {\u0026#39;-\u0026#39;}\r[resultStack,latter] = resultStack.pop();\r[resultStack,former] = resultStack.pop();\rvalue = former - latter;\rresultStack = resultStack.push(value);\rcase {\u0026#39;*\u0026#39;}\r[resultStack,latter] = resultStack.pop();\r[resultStack,former] = resultStack.pop();\rvalue = former * latter;\rresultStack = resultStack.push(value);\rcase {\u0026#39;/\u0026#39;}\r[resultStack,latter] = resultStack.pop();\r[resultStack,former] = resultStack.pop();\rvalue = former / latter;\rresultStack = resultStack.push(value);\rcase {\u0026#39;e\u0026#39;}\rresultStack = resultStack.push(exp(1));\rotherwise\rresultStack = resultStack.push(str2double(expression{i}));\rend\rend\rend\rfunctionpostfixExp =transformPostfixExpression(expression)%{\r去除空格\r%}\rexpression = replace(expression,\u0026#39; \u0026#39;,\u0026#39;\u0026#39;);\r%{\r加空格, 以便遍历所有字符\r%}\rtempExp = \u0026#39;\u0026#39;;\rfor i=1:length(expression)\rif expression(i) == \u0026#39;+\u0026#39; || expression(i) == \u0026#39;-\u0026#39; || expression(i) == \u0026#39;*\u0026#39; || expression(i) == \u0026#39;/\u0026#39; || expression(i) == \u0026#39;(\u0026#39; || expression(i) == \u0026#39;)\u0026#39; || expression(i) == \u0026#39;^\u0026#39;\rtempExp = [tempExp,\u0026#39; \u0026#39;,expression(i),\u0026#39; \u0026#39;];\relse\rtempExp=[tempExp,expression(i)];\rend\rend\rexpression = tempExp;\r%{\r去除首尾可能的空格\r%}\rexpression = strtrim(expression);\rexpression = strsplit(expression,\u0026#39; \u0026#39;);\r%{\r转换成后缀表达式\r%}\ropStack = Stack;\rpostfixExp = \u0026#39;\u0026#39;;\rfor i=1:length(expression)\rswitch expression{i}\rcase {\u0026#39;e\u0026#39;,\u0026#39;E\u0026#39;}\rpostfixExp = [postfixExp,\u0026#39;e \u0026#39;];\rcase \u0026#39;(\u0026#39;\ropStack = opStack.push(\u0026#39;(\u0026#39;);\rcase \u0026#39;)\u0026#39;\rif opStack.stackismember(\u0026#39;(\u0026#39;)\r[opStack, op] = opStack.pop();\rwhile op ~= \u0026#39;(\u0026#39;\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\r[opStack, op] = opStack.pop();\rend\relse\rbreak\rend\rcase \u0026#39;-\u0026#39;\r%{\r区别负号和减号，只要\u0026#39;-\u0026#39;前面有数字即为减号，其他皆为负号。负号用\u0026#39;--\u0026#39;代替\r%}\rif i == 1\ropStack = opStack.push(\u0026#39;--\u0026#39;);\relseif strcmp(expression{i-1}, \u0026#39;+\u0026#39;) || strcmp(expression{i-1}, \u0026#39;-\u0026#39;) || strcmp(expression{i-1}, \u0026#39;*\u0026#39;) || strcmp(expression{i-1}, \u0026#39;/\u0026#39;) || strcmp(expression{i-1}, \u0026#39;(\u0026#39;) || strcmp(expression{i-1}, \u0026#39;^\u0026#39;)\r%{\r按负号处理，例如e^-1，1/-3\r%}\ropStack = opStack.push(\u0026#39;--\u0026#39;);\relse\rwhile ~opStack.stackisempty()\rif strcmp(opStack.getTop() ,\u0026#39;(\u0026#39;)\ropStack = opStack.push(\u0026#39;-\u0026#39;);\rbreak\relseif strcmp(opStack.getTop() ,\u0026#39;--\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;^\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;*\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;/\u0026#39;)|| strcmp(opStack.getTop() ,\u0026#39;ln\u0026#39;) || strcmp(opStack.getTop() ,\u0026#39;lg\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;+\u0026#39;) || strcmp(opStack.getTop(), \u0026#39;-\u0026#39;)\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\relse\ropStack = opStack.push(\u0026#39;-\u0026#39;);\rbreak\rend\rend\rif opStack.stackisempty()\ropStack = opStack.push(expression{i});\rend\rend\rcase \u0026#39;+\u0026#39;\r%{\r忽略一些代表正号的情况，例如ln(+5), e^+5\r%}\rif i==1 || strcmp(expression{i-1}, \u0026#39;+\u0026#39;) || strcmp(expression{i-1}, \u0026#39;-\u0026#39;) || strcmp(expression{i-1}, \u0026#39;*\u0026#39;) || strcmp(expression{i-1}, \u0026#39;/\u0026#39;) || strcmp(expression{i-1}, \u0026#39;(\u0026#39;) || strcmp(expression{i-1}, \u0026#39;^\u0026#39;)\rbreak\relse\rwhile ~opStack.stackisempty()\rif strcmp(opStack.getTop(), \u0026#39;(\u0026#39;)\ropStack = opStack.push(\u0026#39;+\u0026#39;);\rbreak\relseif strcmp(opStack.getTop(), \u0026#39;--\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;^\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;*\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;/\u0026#39;)|| strcmp(opStack.getTop() ,\u0026#39;ln\u0026#39;) || strcmp(opStack.getTop() ,\u0026#39;lg\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;+\u0026#39;) || strcmp(opStack.getTop(), \u0026#39;-\u0026#39;)\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\relse\ropStack = opStack.push(\u0026#39;+\u0026#39;);\rbreak\rend\rend\rif opStack.stackisempty()\ropStack = opStack.push(expression{i});\rend\rend\rcase {\u0026#39;*\u0026#39;,\u0026#39;/\u0026#39;}\rwhile ~opStack.stackisempty()\rif strcmp(opStack.getTop(), \u0026#39;(\u0026#39;)\ropStack = opStack.push(expression{i});\rbreak\relseif strcmp(opStack.getTop(), \u0026#39;--\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;^\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;*\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;/\u0026#39;)|| strcmp(opStack.getTop() ,\u0026#39;ln\u0026#39;) || strcmp(opStack.getTop() ,\u0026#39;lg\u0026#39;)\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\relse\ropStack = opStack.push(expression{i});\rbreak\rend\rend\rif opStack.stackisempty()\ropStack = opStack.push(expression{i});\rend\rcase {\u0026#39;ln\u0026#39;,\u0026#39;lg\u0026#39;}\rwhile ~opStack.stackisempty()\rif strcmp(opStack.getTop(), \u0026#39;(\u0026#39;)\ropStack = opStack.push(expression{i});\rbreak\relseif strcmp(opStack.getTop(), \u0026#39;--\u0026#39;)|| strcmp(opStack.getTop() ,\u0026#39;ln\u0026#39;) || strcmp(opStack.getTop() ,\u0026#39;lg\u0026#39;)\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\relse\ropStack = opStack.push(expression{i});\rbreak\rend\rend\rif opStack.stackisempty()\ropStack = opStack.push(expression{i});\rend\rcase {\u0026#39;^\u0026#39;}\rwhile ~opStack.stackisempty()\rif strcmp(opStack.getTop(), \u0026#39;(\u0026#39;)\ropStack = opStack.push(expression{i});\rbreak\relseif strcmp(opStack.getTop(), \u0026#39;--\u0026#39;)|| strcmp(opStack.getTop() ,\u0026#39;ln\u0026#39;) || strcmp(opStack.getTop() ,\u0026#39;lg\u0026#39;) || strcmp(opStack.getTop(), \u0026#39;^\u0026#39;)\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\relse\ropStack = opStack.push(expression{i});\rbreak\rend\rend\rif opStack.stackisempty()\ropStack = opStack.push(expression{i});\rend\rotherwise\rpostfixExp = [postfixExp,expression{i},\u0026#39; \u0026#39;];\rend\rend\r%{\r将栈中剩余的运算符弹出\r%}\rwhile ~opStack.stackisempty()\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\rend\rend\r   \r为了配合网页语法高亮，注释采用%{ %}\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  classdef Stack\rproperties\rcount = 0;\rtop=1;\rstack=cell(1);\rend\rmethods\rfunctiondisplayU(this)celldisp(this.stack);\rend\rfunctionx =getTop(this)if this.count \u0026gt; 0\rx = this.stack{this.count};\relse\rx = \u0026#39;\u0026#39;;\rend\rend\r%{\r判断是否为空\r%}\rfunctionis =stackisempty(this)if this.count == 0\ris = true;\relse\ris = false;\rend\rend\r%{\r将堆栈置空\r%}\rfunctionthis =empty(this)this.count = 0;\rthis.top = 1;\rthis.stack = cell(1);\rend\r%{\r出栈\r%}\rfunction[this,x] =pop(this)if isempty(this)\rx = {};\relse\rx = this.stack{this.count};\rthis.stack(this.count) = [];\rthis.count = this.count - 1;\rend\rend\r%{\r入栈\r%}\rfunctionthis =push(this,x)this.count = this.count + 1;\rthis.stack{this.count} = x;\rend\r%{\r遍历\r%}\rfunctionis =stackismember(this,str)if this.stackisempty()\ris = false;\relse\rfor i=1:this.count\rif this.stack{i} == str\ris = true;\rreturn\rend\rend\rend\rend\rend\rend\r   \rclear\rclose all\rf = figure;\rf.Units=\u0026#39;Normalized\u0026#39;;\rf.Name=\u0026#39;解析表达式\u0026#39;;\rf.NumberTitle=\u0026#39;off\u0026#39;;\rinputpanel=uipanel(f,\u0026#39;Position\u0026#39;,[0,0.5,1,0.5],\u0026#39;Title\u0026#39;,\u0026#39;输入表达式\u0026#39;,\u0026#39;fontsize\u0026#39;,12);\rresultpanel=uipanel(f,\u0026#39;Position\u0026#39;,[0,0.,1,0.5],\u0026#39;Title\u0026#39;,\u0026#39;计算结果\u0026#39;,\u0026#39;fontsize\u0026#39;,12);\rexpressionedit=uicontrol(inputpanel,\u0026#39;Units\u0026#39;,\u0026#39;Normalized\u0026#39;,\u0026#39;Position\u0026#39;,[0.25 0.4 0.5 0.2],\u0026#39;Style\u0026#39;,\u0026#39;edit\u0026#39;,\u0026#39;String\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;fontsize\u0026#39;,12,\u0026#39;Callback\u0026#39;,{@exp_Callback, resultpanel});\rinfo = {\u0026#39;运行时变量:\u0026#39;;\u0026#39;a = [1 2;3 4]\u0026#39;;\u0026#39;b = [5 6;7 8]\u0026#39;;\u0026#39;nameList = {\u0026#39;\u0026#39;a\u0026#39;\u0026#39;,\u0026#39;\u0026#39;b\u0026#39;\u0026#39;}\u0026#39;;};\ruicontrol(inputpanel,\u0026#39;Style\u0026#39;,\u0026#39;text\u0026#39;,\u0026#39;Units\u0026#39;,\u0026#39;Normalized\u0026#39;,\u0026#39;String\u0026#39;,info,\u0026#39;fontsize\u0026#39;,12,\u0026#39;Position\u0026#39;,[0.25 0.6 0.5 0.3]);\rfunctionexp_Callback(src,event,resultpanel)expression = get(src,\u0026#39;String\u0026#39;);\rif ~isempty(expression)\rpostfixExp = transformPostfixExpression(expression);\rresult = evalPostFixExpression(postfixExp);\rresulttable = uitable(resultpanel,\u0026#39;Data\u0026#39;,result,\u0026#39;Units\u0026#39;,\u0026#39;Normalized\u0026#39;,\u0026#39;Position\u0026#39;,[0 0 1 1],\u0026#39;ColumnName\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;RowName\u0026#39;,\u0026#39;\u0026#39;);\rend\rend\rfunctionvalue =evalPostFixExpression(expression)a = [1 2;3 4];\rb = [5 6;7 8];\rarray(:,:,1) = a;\rarray(:,:,2) = b;\rnamelist = {\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;};\rresultStack = Stack;\rexpression = strsplit(expression);\rfor i=1:length(expression)\rswitch expression{i}\rcase {\u0026#39;--\u0026#39;}\r[resultStack,value] = resultStack.pop();\rvalue = - value;\rresultStack = resultStack.push(value);\rcase {\u0026#39;ln\u0026#39;}\r[resultStack,value] = resultStack.pop();\rvalue = log(value);\rresultStack = resultStack.push(value);\rcase {\u0026#39;lg\u0026#39;}\r[resultStack,value] = resultStack.pop();\rvalue = log10(value);\rresultStack = resultStack.push(value);\rcase {\u0026#39;^\u0026#39;}\r[resultStack,latter] = resultStack.pop();\r[resultStack,former] = resultStack.pop();\rvalue = former ^ latter;\rresultStack = resultStack.push(value);\rcase {\u0026#39;+\u0026#39;}\r[resultStack,latter] = resultStack.pop();\r[resultStack,former] = resultStack.pop();\rvalue = former + latter;\rresultStack = resultStack.push(value);\rcase {\u0026#39;-\u0026#39;}\r[resultStack,latter] = resultStack.pop();\r[resultStack,former] = resultStack.pop();\rvalue = former - latter;\rresultStack = resultStack.push(value);\rcase {\u0026#39;*\u0026#39;}\r[resultStack,latter] = resultStack.pop();\r[resultStack,former] = resultStack.pop();\rvalue = former * latter;\rresultStack = resultStack.push(value);\rcase {\u0026#39;/\u0026#39;}\r[resultStack,latter] = resultStack.pop();\r[resultStack,former] = resultStack.pop();\rvalue = former / latter;\rresultStack = resultStack.push(value);\rcase {\u0026#39;e\u0026#39;}\rresultStack = resultStack.push(exp(1));\rotherwise\r%{\r增加运行时变量的获取方法\r%}\rvalueOfVariable = getvalueOfVariable(expression{i},namelist,array);\rif ~isnan(str2double(expression{i}))\rresultStack = resultStack.push(str2double(expression{i}));\relseif ~isempty(valueOfVariable)\rresultStack = resultStack.push(valueOfVariable);\rend\rend\rend\rend\r%{\r根据字符串索引来获取变量的值\r%}\rfunctionvalueOfVariable =getvalueOfVariable(strname,namelist,valuematrix)valueOfVariable = valuematrix(:,:,ismember(namelist,strname));\rend\rfunctionpostfixExp =transformPostfixExpression(expression)%{\r去除空格\r%}\rexpression = replace(expression,\u0026#39; \u0026#39;,\u0026#39;\u0026#39;);\r%{\r加空格, 以便遍历所有字符\r%}\rtempExp = \u0026#39;\u0026#39;;\rfor i=1:length(expression)\rif expression(i) == \u0026#39;+\u0026#39; || expression(i) == \u0026#39;-\u0026#39; || expression(i) == \u0026#39;*\u0026#39; || expression(i) == \u0026#39;/\u0026#39; || expression(i) == \u0026#39;(\u0026#39; || expression(i) == \u0026#39;)\u0026#39; || expression(i) == \u0026#39;^\u0026#39;\rtempExp = [tempExp,\u0026#39; \u0026#39;,expression(i),\u0026#39; \u0026#39;];\relse\rtempExp=[tempExp,expression(i)];\rend\rend\rexpression = tempExp;\r%{\r去除首尾可能的空格\r%}\rexpression = strtrim(expression);\rexpression = strsplit(expression,\u0026#39; \u0026#39;);\r%{\r转换成后缀表达式\r%}\ropStack = Stack;\rpostfixExp = \u0026#39;\u0026#39;;\rfor i=1:length(expression)\rswitch expression{i}\rcase {\u0026#39;e\u0026#39;,\u0026#39;E\u0026#39;}\rpostfixExp = [postfixExp,\u0026#39;e \u0026#39;];\rcase \u0026#39;(\u0026#39;\ropStack = opStack.push(\u0026#39;(\u0026#39;);\rcase \u0026#39;)\u0026#39;\rif opStack.stackismember(\u0026#39;(\u0026#39;)\r[opStack, op] = opStack.pop();\rwhile op ~= \u0026#39;(\u0026#39;\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\r[opStack, op] = opStack.pop();\rend\relse\rbreak\rend\rcase \u0026#39;-\u0026#39;\r%{\r区别负号和减号，只要\u0026#39;-\u0026#39;前面有数字即为减号，其他皆为负号。负号用\u0026#39;--\u0026#39;代替\r%}\rif i == 1\ropStack = opStack.push(\u0026#39;--\u0026#39;);\relseif strcmp(expression{i-1}, \u0026#39;+\u0026#39;) || strcmp(expression{i-1}, \u0026#39;-\u0026#39;) || strcmp(expression{i-1}, \u0026#39;*\u0026#39;) || strcmp(expression{i-1}, \u0026#39;/\u0026#39;) || strcmp(expression{i-1}, \u0026#39;(\u0026#39;) || strcmp(expression{i-1}, \u0026#39;^\u0026#39;)\r%{\r按负号处理，例如e^-1，1/-3\r%}\ropStack = opStack.push(\u0026#39;--\u0026#39;);\relse\rwhile ~opStack.stackisempty()\rif strcmp(opStack.getTop() ,\u0026#39;(\u0026#39;)\ropStack = opStack.push(\u0026#39;-\u0026#39;);\rbreak\relseif strcmp(opStack.getTop() ,\u0026#39;--\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;^\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;*\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;/\u0026#39;)|| strcmp(opStack.getTop() ,\u0026#39;ln\u0026#39;) || strcmp(opStack.getTop() ,\u0026#39;lg\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;+\u0026#39;) || strcmp(opStack.getTop(), \u0026#39;-\u0026#39;)\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\relse\ropStack = opStack.push(\u0026#39;-\u0026#39;);\rbreak\rend\rend\rif opStack.stackisempty()\ropStack = opStack.push(expression{i});\rend\rend\rcase \u0026#39;+\u0026#39;\r%{\r忽略一些代表正号的情况，例如ln(+5), e^+5\r%}\rif i==1 || strcmp(expression{i-1}, \u0026#39;+\u0026#39;) || strcmp(expression{i-1}, \u0026#39;-\u0026#39;) || strcmp(expression{i-1}, \u0026#39;*\u0026#39;) || strcmp(expression{i-1}, \u0026#39;/\u0026#39;) || strcmp(expression{i-1}, \u0026#39;(\u0026#39;) || strcmp(expression{i-1}, \u0026#39;^\u0026#39;)\rbreak\relse\rwhile ~opStack.stackisempty()\rif strcmp(opStack.getTop(), \u0026#39;(\u0026#39;)\ropStack = opStack.push(\u0026#39;+\u0026#39;);\rbreak\relseif strcmp(opStack.getTop(), \u0026#39;--\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;^\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;*\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;/\u0026#39;)|| strcmp(opStack.getTop() ,\u0026#39;ln\u0026#39;) || strcmp(opStack.getTop() ,\u0026#39;lg\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;+\u0026#39;) || strcmp(opStack.getTop(), \u0026#39;-\u0026#39;)\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\relse\ropStack = opStack.push(\u0026#39;+\u0026#39;);\rbreak\rend\rend\rif opStack.stackisempty()\ropStack = opStack.push(expression{i});\rend\rend\rcase {\u0026#39;*\u0026#39;,\u0026#39;/\u0026#39;}\rwhile ~opStack.stackisempty()\rif strcmp(opStack.getTop(), \u0026#39;(\u0026#39;)\ropStack = opStack.push(expression{i});\rbreak\relseif strcmp(opStack.getTop(), \u0026#39;--\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;^\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;*\u0026#39;)|| strcmp(opStack.getTop(), \u0026#39;/\u0026#39;)|| strcmp(opStack.getTop() ,\u0026#39;ln\u0026#39;) || strcmp(opStack.getTop() ,\u0026#39;lg\u0026#39;)\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\relse\ropStack = opStack.push(expression{i});\rbreak\rend\rend\rif opStack.stackisempty()\ropStack = opStack.push(expression{i});\rend\rcase {\u0026#39;ln\u0026#39;,\u0026#39;lg\u0026#39;}\rwhile ~opStack.stackisempty()\rif strcmp(opStack.getTop(), \u0026#39;(\u0026#39;)\ropStack = opStack.push(expression{i});\rbreak\relseif strcmp(opStack.getTop(), \u0026#39;--\u0026#39;)|| strcmp(opStack.getTop() ,\u0026#39;ln\u0026#39;) || strcmp(opStack.getTop() ,\u0026#39;lg\u0026#39;)\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\relse\ropStack = opStack.push(expression{i});\rbreak\rend\rend\rif opStack.stackisempty()\ropStack = opStack.push(expression{i});\rend\rcase {\u0026#39;^\u0026#39;}\rwhile ~opStack.stackisempty()\rif strcmp(opStack.getTop(), \u0026#39;(\u0026#39;)\ropStack = opStack.push(expression{i});\rbreak\relseif strcmp(opStack.getTop(), \u0026#39;--\u0026#39;)|| strcmp(opStack.getTop() ,\u0026#39;ln\u0026#39;) || strcmp(opStack.getTop() ,\u0026#39;lg\u0026#39;) || strcmp(opStack.getTop(), \u0026#39;^\u0026#39;)\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\relse\ropStack = opStack.push(expression{i});\rbreak\rend\rend\rif opStack.stackisempty()\ropStack = opStack.push(expression{i});\rend\rotherwise\rpostfixExp = [postfixExp,expression{i},\u0026#39; \u0026#39;];\rend\rend\r%{\r将栈中剩余的运算符弹出\r%}\rwhile ~opStack.stackisempty()\r[opStack, op] = opStack.pop();\rpostfixExp = [postfixExp,op,\u0026#39; \u0026#39;];\rend\rend\r   \r  'use strict'; var containerId = JSON.parse(\"\\\"cd177cbbbd8b5c59\\\"\"); var containerElem = document.getElementById(containerId); var tabLinks = null; var tabContents = null; var ids = []; if (containerElem) { tabLinks = containerElem.querySelectorAll('.tab__link'); tabContents = containerElem.querySelectorAll('.tab__content'); } for (var i = 0; i 0) { tabContents[0].style.display = 'block'; }  ","description":"利用堆栈对MATLAB Gui控件输入的字符串表达式进行解析","id":1,"section":"posts","tags":["MATLAB","MATLAB Gui","解析表达式","栈","后缀表达式"],"title":"Matlab 解析表达式","uri":"https://mayan-lab.github.io/zh/posts/parsing-expression-from-matlab-uicontrol-text/"},{"content":"基础  通过Excel VBA编写特殊用途的函数，可以更方便地处理数据，提高效率。一般使用VBA中的Function来定义函数（Sub 不能提供返回值），即使含有自定义函数计算结果的xls文件在未安装自定义函数的电脑上打开，任然会正确显示结果，只是不能继续运算。\n 如何插入自定义的函数  新建Excel表格，（最好关闭别的Excel表），按alt + F11，点击插入，模块，添加代码。\n Function示例 1 2 3 4  \u0026#39;Function 函数名(参数 As 类型) As 函数返回类型 Function Kelvin(temperature As Double) As Double Kelvin = temperature + 273.15 End Function   获取元素分子量 部分 完整  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  Function GETMOLES(name) \u0026#39;author: zhaoqiu  Dim Formula(124) As String Formula(0) = \u0026#34;SiO2\u0026#34; Formula(1) = \u0026#34;TiO2\u0026#34; Formula(2) = \u0026#34;Al2O3\u0026#34; \u0026#39; ... ...  Formula(122) = \u0026#34;NH3\u0026#34; Formula(123) = \u0026#34;NH4\u0026#34; Formula(124) = \u0026#34;NH4NO3\u0026#34; Dim MolecularWeight(124) As Double MolecularWeight(0) = 60.0843 MolecularWeight(1) = 79.8988 MolecularWeight(2) = 101.96128 \u0026#39; ... ...  MolecularWeight(122) = 17.0304 MolecularWeight(123) = 18.0383 MolecularWeight(124) = 80.0432 Dim oxideN As Long oxideN = UBound(Formula) - LBound(Formula) + 1 Dim i As Long Dim result As Double result = -1 For i = 0 To (oxideN - 1) If UCase(Trim(name)) = UCase(Formula(i)) Then result = MolecularWeight(i) Exit For Else End If Next If result = -1 Then GETMOLES = -1 Else GETMOLES = result End If End Function       All codesunction GETMOLES(name) \u0026#39;author: zhaoqiu  Dim Formula(124) As String Formula(0) = \u0026#34;SiO2\u0026#34; Formula(1) = \u0026#34;TiO2\u0026#34; Formula(2) = \u0026#34;Al2O3\u0026#34; Formula(3) = \u0026#34;Cr2O3\u0026#34; Formula(4) = \u0026#34;Fe2O3\u0026#34; Formula(5) = \u0026#34;FeO\u0026#34; Formula(6) = \u0026#34;MnO\u0026#34; Formula(7) = \u0026#34;MgO\u0026#34; Formula(8) = \u0026#34;CaO\u0026#34; Formula(9) = \u0026#34;Na2O\u0026#34; Formula(10) = \u0026#34;K2O\u0026#34; Formula(11) = \u0026#34;H2O\u0026#34; Formula(12) = \u0026#34;NiO\u0026#34; Formula(13) = \u0026#34;ZrO2\u0026#34; Formula(14) = \u0026#34;HfO2\u0026#34; Formula(15) = \u0026#34;H\u0026#34; Formula(16) = \u0026#34;He\u0026#34; Formula(17) = \u0026#34;Li\u0026#34; Formula(18) = \u0026#34;Be\u0026#34; Formula(19) = \u0026#34;B\u0026#34; Formula(20) = \u0026#34;C\u0026#34; Formula(21) = \u0026#34;N\u0026#34; Formula(22) = \u0026#34;O\u0026#34; Formula(23) = \u0026#34;F\u0026#34; Formula(24) = \u0026#34;Ne\u0026#34; Formula(25) = \u0026#34;Na\u0026#34; Formula(26) = \u0026#34;Mg\u0026#34; Formula(27) = \u0026#34;Al\u0026#34; Formula(28) = \u0026#34;Si\u0026#34; Formula(29) = \u0026#34;P\u0026#34; Formula(30) = \u0026#34;S\u0026#34; Formula(31) = \u0026#34;Cl\u0026#34; Formula(32) = \u0026#34;Ar\u0026#34; Formula(33) = \u0026#34;K\u0026#34; Formula(34) = \u0026#34;Ca\u0026#34; Formula(35) = \u0026#34;Sc\u0026#34; Formula(36) = \u0026#34;Ti\u0026#34; Formula(37) = \u0026#34;V\u0026#34; Formula(38) = \u0026#34;Cr\u0026#34; Formula(39) = \u0026#34;Mn\u0026#34; Formula(40) = \u0026#34;Fe\u0026#34; Formula(41) = \u0026#34;Co\u0026#34; Formula(42) = \u0026#34;Ni\u0026#34; Formula(43) = \u0026#34;Cu\u0026#34; Formula(44) = \u0026#34;Zn\u0026#34; Formula(45) = \u0026#34;Ga\u0026#34; Formula(46) = \u0026#34;Ge\u0026#34; Formula(47) = \u0026#34;As\u0026#34; Formula(48) = \u0026#34;Se\u0026#34; Formula(49) = \u0026#34;Br\u0026#34; Formula(50) = \u0026#34;Kr\u0026#34; Formula(51) = \u0026#34;Rb\u0026#34; Formula(52) = \u0026#34;Sr\u0026#34; Formula(53) = \u0026#34;Y\u0026#34; Formula(54) = \u0026#34;Zr\u0026#34; Formula(55) = \u0026#34;Nb\u0026#34; Formula(56) = \u0026#34;Mo\u0026#34; Formula(57) = \u0026#34;Tc\u0026#34; Formula(58) = \u0026#34;Ru\u0026#34; Formula(59) = \u0026#34;Rh\u0026#34; Formula(60) = \u0026#34;Pd\u0026#34; Formula(61) = \u0026#34;Ag\u0026#34; Formula(62) = \u0026#34;Cd\u0026#34; Formula(63) = \u0026#34;In\u0026#34; Formula(64) = \u0026#34;Sn\u0026#34; Formula(65) = \u0026#34;Sb\u0026#34; Formula(66) = \u0026#34;Te\u0026#34; Formula(67) = \u0026#34;I\u0026#34; Formula(68) = \u0026#34;Xe\u0026#34; Formula(69) = \u0026#34;Cs\u0026#34; Formula(70) = \u0026#34;Ba\u0026#34; Formula(71) = \u0026#34;La\u0026#34; Formula(72) = \u0026#34;Ce\u0026#34; Formula(73) = \u0026#34;Pr\u0026#34; Formula(74) = \u0026#34;Nd\u0026#34; Formula(75) = \u0026#34;Pm\u0026#34; Formula(76) = \u0026#34;Sm\u0026#34; Formula(77) = \u0026#34;Eu\u0026#34; Formula(78) = \u0026#34;Gd\u0026#34; Formula(79) = \u0026#34;Tb\u0026#34; Formula(80) = \u0026#34;Dy\u0026#34; Formula(81) = \u0026#34;Ho\u0026#34; Formula(82) = \u0026#34;Er\u0026#34; Formula(83) = \u0026#34;Tm\u0026#34; Formula(84) = \u0026#34;Yb\u0026#34; Formula(85) = \u0026#34;Lu\u0026#34; Formula(86) = \u0026#34;Hf\u0026#34; Formula(87) = \u0026#34;Ta\u0026#34; Formula(88) = \u0026#34;W\u0026#34; Formula(89) = \u0026#34;Re\u0026#34; Formula(90) = \u0026#34;Os\u0026#34; Formula(91) = \u0026#34;Ir\u0026#34; Formula(92) = \u0026#34;Pt\u0026#34; Formula(93) = \u0026#34;Au\u0026#34; Formula(94) = \u0026#34;Hg\u0026#34; Formula(95) = \u0026#34;Tl\u0026#34; Formula(96) = \u0026#34;Pb\u0026#34; Formula(97) = \u0026#34;Bi\u0026#34; Formula(98) = \u0026#34;Po\u0026#34; Formula(99) = \u0026#34;At\u0026#34; Formula(100) = \u0026#34;Rn\u0026#34; Formula(101) = \u0026#34;Fr\u0026#34; Formula(102) = \u0026#34;Ra\u0026#34; Formula(103) = \u0026#34;Ac\u0026#34; Formula(104) = \u0026#34;Th\u0026#34; Formula(105) = \u0026#34;Pa\u0026#34; Formula(106) = \u0026#34;U\u0026#34; Formula(107) = \u0026#34;Np\u0026#34; Formula(108) = \u0026#34;Pu\u0026#34; Formula(109) = \u0026#34;Am\u0026#34; Formula(110) = \u0026#34;Cm\u0026#34; Formula(111) = \u0026#34;Bk\u0026#34; Formula(112) = \u0026#34;Cf\u0026#34; Formula(113) = \u0026#34;Es\u0026#34; Formula(114) = \u0026#34;Fm\u0026#34; Formula(115) = \u0026#34;Md\u0026#34; Formula(116) = \u0026#34;No\u0026#34; Formula(117) = \u0026#34;SO3\u0026#34; Formula(118) = \u0026#34;P2O5\u0026#34; Formula(119) = \u0026#34;N2\u0026#34; Formula(120) = \u0026#34;CO2\u0026#34; Formula(121) = \u0026#34;CO\u0026#34; Formula(122) = \u0026#34;NH3\u0026#34; Formula(123) = \u0026#34;NH4\u0026#34; Formula(124) = \u0026#34;NH4NO3\u0026#34; \u0026#39; molecular weight  Dim MolecularWeight(124) As Double MolecularWeight(0) = 60.0843 MolecularWeight(1) = 79.8988 MolecularWeight(2) = 101.96128 MolecularWeight(3) = 151.9902 MolecularWeight(4) = 159.6922 MolecularWeight(5) = 71.8464 MolecularWeight(6) = 70.9374 MolecularWeight(7) = 40.3044 MolecularWeight(8) = 56.0794 MolecularWeight(9) = 61.97894 MolecularWeight(10) = 94.196 MolecularWeight(11) = 18.0152 MolecularWeight(12) = 74.6994 MolecularWeight(13) = 123.218 MolecularWeight(14) = 210.49 MolecularWeight(15) = 1.0079 MolecularWeight(16) = 4.0026 MolecularWeight(17) = 6.941 MolecularWeight(18) = 9.01218 MolecularWeight(19) = 10.81 MolecularWeight(20) = 12.011 MolecularWeight(21) = 14.0067 MolecularWeight(22) = 15.9994 MolecularWeight(23) = 18.998403 MolecularWeight(24) = 20.179 MolecularWeight(25) = 22.98977 MolecularWeight(26) = 24.305 MolecularWeight(27) = 26.98154 MolecularWeight(28) = 28.0855 MolecularWeight(29) = 30.97376 MolecularWeight(30) = 32.06 MolecularWeight(31) = 35.453 MolecularWeight(32) = 39.948 MolecularWeight(33) = 39.0983 MolecularWeight(34) = 40.08 MolecularWeight(35) = 44.9559 MolecularWeight(36) = 47.9 MolecularWeight(37) = 50.9415 MolecularWeight(38) = 51.996 MolecularWeight(39) = 54.938 MolecularWeight(40) = 55.847 MolecularWeight(41) = 58.9332 MolecularWeight(42) = 58.7 MolecularWeight(43) = 63.546 MolecularWeight(44) = 65.38 MolecularWeight(45) = 69.72 MolecularWeight(46) = 72.59 MolecularWeight(47) = 74.9216 MolecularWeight(48) = 78.96 MolecularWeight(49) = 79.904 MolecularWeight(50) = 83.8 MolecularWeight(51) = 85.4678 MolecularWeight(52) = 87.62 MolecularWeight(53) = 88.9059 MolecularWeight(54) = 91.22 MolecularWeight(55) = 92.9064 MolecularWeight(56) = 95.94 MolecularWeight(57) = 98 MolecularWeight(58) = 101.07 MolecularWeight(59) = 102.9055 MolecularWeight(60) = 106.4 MolecularWeight(61) = 107.868 MolecularWeight(62) = 112.41 MolecularWeight(63) = 114.82 MolecularWeight(64) = 118.69 MolecularWeight(65) = 121.75 MolecularWeight(66) = 127.6 MolecularWeight(67) = 126.9045 MolecularWeight(68) = 131.3 MolecularWeight(69) = 132.9054 MolecularWeight(70) = 137.33 MolecularWeight(71) = 138.9055 MolecularWeight(72) = 140.12 MolecularWeight(73) = 140.9077 MolecularWeight(74) = 144.24 MolecularWeight(75) = 145 MolecularWeight(76) = 150.4 MolecularWeight(77) = 151.96 MolecularWeight(78) = 157.25 MolecularWeight(79) = 158.9254 MolecularWeight(80) = 162.5 MolecularWeight(81) = 164.9304 MolecularWeight(82) = 167.26 MolecularWeight(83) = 168.9342 MolecularWeight(84) = 173.04 MolecularWeight(85) = 174.967 MolecularWeight(86) = 178.49 MolecularWeight(87) = 180.9479 MolecularWeight(88) = 183.85 MolecularWeight(89) = 186.207 MolecularWeight(90) = 190.2 MolecularWeight(91) = 192.22 MolecularWeight(92) = 195.09 MolecularWeight(93) = 196.9665 MolecularWeight(94) = 200.59 MolecularWeight(95) = 204.37 MolecularWeight(96) = 207.2 MolecularWeight(97) = 208.9804 MolecularWeight(98) = 209 MolecularWeight(99) = 210 MolecularWeight(100) = 222 MolecularWeight(101) = 223 MolecularWeight(102) = 226.0254 MolecularWeight(103) = 227.0278 MolecularWeight(104) = 232.0381 MolecularWeight(105) = 231.0359 MolecularWeight(106) = 238.029 MolecularWeight(107) = 237.0482 MolecularWeight(108) = 244 MolecularWeight(109) = 243 MolecularWeight(110) = 247 MolecularWeight(111) = 247 MolecularWeight(112) = 251 MolecularWeight(113) = 252 MolecularWeight(114) = 257 MolecularWeight(115) = 258 MolecularWeight(116) = 259 MolecularWeight(117) = 80.0582 MolecularWeight(118) = 141.94452 MolecularWeight(119) = 28.0134 MolecularWeight(120) = 44.0098 MolecularWeight(121) = 28.0104 MolecularWeight(122) = 17.0304 MolecularWeight(123) = 18.0383 MolecularWeight(124) = 80.0432 \u0026#39; UBound 返回数组最大下标 LBound 返回数组的最小下标即0  Dim oxideN As Long oxideN = UBound(Formula) - LBound(Formula) + 1 Dim i As Long Dim result As Double result = -1 For i = 0 To (oxideN - 1) \u0026#39; 将所有字符串转换成大写  If UCase(Trim(name)) = UCase(Formula(i)) Then result = MolecularWeight(i) Exit For Else End If Next If result = -1 Then GETMOLES = -1 Else GETMOLES = result End If End Function         'use strict'; var containerId = JSON.parse(\"\\\"9b11bf778e1f4bb2\\\"\"); var containerElem = document.getElementById(containerId); var tabLinks = null; var tabContents = null; var ids = []; if (containerElem) { tabLinks = containerElem.querySelectorAll('.tab__link'); tabContents = containerElem.querySelectorAll('.tab__content'); } for (var i = 0; i 0) { tabContents[0].style.display = 'block'; }  去除从ScienceDirect网页上直接复制的数据的非数字格式  搜集文献数据的时候，如果文献没有提供单独的excel文件，最佳的复制数据的方式是从文献对应的网页版上复制，但ScienceDirect上的页面是经过特殊渲染过的，比如负号-并不是真正的负号，另外类似-11.63(221), 58.5 ± 2·3等数据+误差的格式也需要后续处理。\n   All codes  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98  Function GETNUMBER(text) temptext = text text = Trim(text) If Len(text) \u0026gt; 0 Then If Not IsNumeric(text) Then \u0026#39; 常见格式：2.48(5) 2.48 (5) 2.48 ±2 3·52? 2.48(5) 1,000  \u0026#39; 区分需要替换的符号和去除的符号  \u0026#39; 需要去除的  Dim BlankIndex As Long BlankIndex = InStr(1, text, \u0026#34; \u0026#34;) If BlankIndex = 0 Then BlankIndex = 100000 End If Dim LeftBracketIndex As Long LeftBracketIndex = InStr(1, text, \u0026#34;(\u0026#34;) If LeftBracketIndex = 0 Then LeftBracketIndex = 100000 End If Dim RightBracketIndex As Long RightBracketIndex = InStr(1, text, \u0026#34;)\u0026#34;) If RightBracketIndex = 0 Then RightBracketIndex = 100000 End If Dim QuestionMarkIndex As Long QuestionMarkIndex = InStr(1, text, \u0026#34;?\u0026#34;) If QuestionMarkIndex = 0 Then QuestionMarkIndex = 100000 End If Dim PlusMinusIndex As Long PlusMinusIndex = InStr(1, text, \u0026#34;±\u0026#34;) If PlusMinusIndex = 0 Then PlusMinusIndex = 100000 End If minindex = WorksheetFunction.Min(BlankIndex, LeftBracketIndex, RightBracketIndex, QuestionMarkIndex, PlusMinusIndex) If minindex \u0026lt; 100000 Then text = Left(text, minindex - 1) End If \u0026#39; 需要替换的  Dim DotIndex As Long DotIndex = InStr(1, text, \u0026#34;·\u0026#34;) If Not DotIndex = 0 Then text = Replace(text, \u0026#34;·\u0026#34;, \u0026#34;.\u0026#34;, 1, 1) End If Dim CommaIndex As Long CommaIndex = InStr(1, text, \u0026#34;,\u0026#34;) If Not CommaIndex = 0 Then text = Replace(text, \u0026#34;,\u0026#34;, \u0026#34;\u0026#34;, 1, 1) End If If Val(text) = 0 Then If Len(text) \u0026gt; 1 Then If (Asc(Left(text, 1)) \u0026gt;= 65 And Asc(Left(text, 1)) \u0026lt;= 90) Or (Asc(Left(text, 1)) \u0026gt;= 97 And Asc(Left(text, 1)) \u0026lt;= 122) Then GETNUMBER = temptext Else GETNUMBER = Val(\u0026#34;-\u0026#34; \u0026amp; Right(text, Len(text) - 1)) End If Else GETNUMBER = temptext End If Else GETNUMBER = Val(text) End If Else GETNUMBER = Val(text) End If End If End Function      提取误差  待完成\n ","description":"开发Excel插件","id":2,"section":"posts","tags":["Excel","分子量","提取"],"title":"自定义Excel函数","uri":"https://mayan-lab.github.io/zh/posts/customizing-excel-function/"},{"content":" 八大行星的名字都来源于 罗马诸神 ，这些名字都蕴含了对应行星的特点。\n Solar system1 Mercury：命名于罗马信使神，他脚上有翅膀，有着出了名的移动速度。\nVenus：命名于爱与美的女神。金星是天空中亮度仅次于太阳和月亮的星球，她是天空中永恒的美景。\nEarth: 和其他行星不同，地球并不是源于古罗马的某个神。\nMars：罗马战神。红色是鲜血与战争的颜色，而火星就是一颗红色的星球。这种红色是源于他土壤的一种锈迹。\nJupiter：古罗马的至高神。太阳系最大的行星是木星，因此他被命名为诸神之王。\nSaturn：他是在Jupiter之前统治世界的泰坦神王，同时也是农业之神。Saturn占据着天空最重要的地方，拥有着超过30个月球大的体积。\nUranus：最初的罗马天空之神。\nNeptune：命名于罗马海洋之神。很多年以前，海王星被认为运行在太阳系的边界，守卫着整个辽阔的宇宙海洋。\nPluto：地狱之神。地狱的黑暗和寒冷正如人们看到的冥王星那样。\n soloar system wiki \u0026#x21a9;\u0026#xfe0e;\n   ","description":"Mercury, Venus, Earth, Mars Jupiter, Saturn, Uranus, Neptune","id":3,"section":"posts","tags":["planet","astronomy"],"title":"行星名称起源","uri":"https://mayan-lab.github.io/zh/posts/planet-name-origins/"},{"content":"基本配置 同时在win和mac上部署了hugo，都使用了Webstorm，本来打算借助Webstorm对Git的集成的优势，但使用下来体验并不好，最后还是在Webstorm中的Terminal中进行git。\n1 2 3 4 5 6 7 8 9 10  cd public\rgit init\rgit remote add origin git@github.com:/\u0026lt;github_username\u0026gt;/\u0026lt;github_username\u0026gt;.github.io.git\rgit add .\rgit commit -m \u0026#34;some message\u0026#34;\r# -u表示以后可以仅使用git push进行上传\rgit push -u origin master\r# 新机器同步仓库 拷贝其他不需要同步的文件时注意删除.git隐藏文件夹\rgit pull origin master\r  1 2 3 4 5 6 7 8 9 10 11 12 13 14  # hugo command\r# 启动本地server\rhugo server -D\r# 新建站点\rhugo new site sitename\r# 在已存在的文件夹下强制创建\rhugo new site sitename --force\r# 新建文章\rhugo new posts/my-post.md\r# 构建项目 在根目录下运行\rhugo\r  百度不收录Github Page 首先尝试zeit.co提供的免费CDN，但百度仍然不能正常抓取,抓取测试提示308错误，而且不能认证为https，原因现在还没找到。另外，Gitlab Page也可以考虑，但是，gitlab并不是提交hugo构建后的静态文件，而是接受原资源，进而在其服务器里自动构建，要想更便捷的同时同步Github和Gitlab的Page内容并不容易。\n插入自定义js, css 全局加载 custom_css = [ ] # custom_css = [\u0026quot;scss/custom.scss\u0026quot;] root/assets/scss/custom.scss\rcustom_js = [\u0026quot;js/first_page.js\u0026quot;] # custom_js = [\u0026quot;js/custom.js\u0026quot;] root/assets/js/custom.js\r 自定义链接下划线css失败。默认情况下，普通段落中链接文字显示下划线，但列表等中的链接文字不显示下划线，比如：Gitlab Page，仍然会有下划线。 计划通过加入typescript编译过后的js文件以及d3js与Github page结合，封装一些d3js绘图的模块。  局部加载  在Front Matter中添加 ---\rtitle: \u0026quot;Your catchy title\u0026quot;\rcdnjs: [\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/d3/5.15.1/d3.min.js\u0026quot;]\rcustom_js_in_post: [\u0026quot;js/first_page.js\u0026quot;]\r---\r 在themes/zzo/partials/head/custom-head.html中添加(也可以在自定义布局的文件夹下新建相似目录)： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  {{ if .Params.cdnjs }}\r{{ range $cdnjsone := .Params.cdnjs }}\r\u0026lt;script src=\u0026#34;{{ $cdnjsone }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r{{ end }}\r{{ end }}\r{{ if .Params.custom_js_in_post }}\r{{ range .Params.custom_js_in_post }}\r{{ $custom_template := resources.Get . }}\r{{ if $custom_template }}\r{{ $custom_js := $custom_template | resources.Minify | resources.Fingerprint }}\r\u0026lt;script defer src=\u0026#34;{{ $custom_js.RelPermalink }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r{{ end }}\r{{ end }}\r{{ end }}\r    调用d3js示例 \rMac Win 协同编辑 ","description":"记录使用到的Hugo和github page的功能","id":4,"section":"posts","tags":["hugo"],"title":"第一篇文章：记录使用到的Hugo的功能","uri":"https://mayan-lab.github.io/zh/posts/first-page/"},{"content":"分享日常工作 相关代码 ","description":"","id":6,"section":"about","tags":null,"title":"About","uri":"https://mayan-lab.github.io/zh/about/about/"}]